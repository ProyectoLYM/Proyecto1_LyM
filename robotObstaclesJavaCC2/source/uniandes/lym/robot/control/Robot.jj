/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=3; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
 

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();

	private Map<String, Integer> variables = new HashMap<>();

	public void guardarVariables(String nombreVariable) {
	  if (variables.containsKey(nombreVariable)) {
	     throw new RuntimeException("La variable ya existe: " + nombreVariable);
	  }
	  variables.put(nombreVariable, null);
	}

	public void asignarValor(String nombreVariable, int valor) {
        if (!variables.containsKey(nombreVariable)) {
            throw new RuntimeException("La variable no existe: " + nombreVariable);
        }
        variables.put(nombreVariable, valor);
    }

    public int getValor(String nombreVariable) {
        Integer valor = variables.get(nombreVariable);
        if (valor == null) {
            throw new RuntimeException("La variable no tiene un valor asignado: " + nombreVariable);
        }
        return valor;
    }
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: // Nombres de Comandos 
{
		< MOV:  "Mov">
		| < RIGHT: "RIGHT">
		| < PUT: "Put">
		| < PICK: "Pick">
		| < POP: "Pop" >
		| < GO: "GO" >
        | < HOP:  "HOP" >
        | < JUMP:  "jump" >
        | < WALK: "walk" >
        | < LEAP:  "leap" >
        | < TURN:  "turn" >
        | < TURNTO:  "turnto" >
        | < DROP:  "drop" >
        | < GET:  "get" >
        | < GRAB:  "grab" >
        | < LETGO:  "letGo" >
        | < NOP:  "nop" >
        | < DEFVAR:  "defVar" >
        | < DEFPROC:  "defProc" >
        | < IF:  "if" >
        | < ELSE:  "else" >
        | < WHILE:  "while" >
        | < REPEAT:  "repeat" >
        | < TIMES:  "times" >
        | < FACING:  "facing" >
        | < CAN:  "can" >
        | < NOT:  "not" >
        | < DIRECTION: "front" | "right" | "left" | "back" | "around" >
        | < ORIENTATION: "north" | "south" | "east" | "west" >
        | < CONDITIONAL : "facing"| "can" | "not" >
        
}


TOKEN: // Palabras del lenguaje
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}


TOKEN: // Area de Operadores
{
  		
 		< VARIABLE_NAME: (["a"-"z", "A"-"Z"])+ (["a"-"z", "A"-"Z", "0"-"9"])* >
  		| < CONDITION: (["a"-"z", "A"-"Z"])+ (["a"-"z", "A"-"Z", "0"-"9", " "])* >
		| < PERIOD : "." >
		| < RPAREN : ")" >
		| < LPAREN : "(" >
		| < QUOTE : "\"" >
		| < RSQUARE : "]" >
		| < LSQUARE : "[" >
		| < DOSPUNTOS : ":" >
		| < COMA : "," >
		| < PUNTOYCOMA : ";" >
		| < RCURLY : "}" >
        | < LCURLY : "{" >
}  		
  

TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}


// Gramatica


void creacionVariable():
{}
{
  <DEFVAR> <VARIABLE_NAME> <NUM>
}

void creacionProceso():
{}
{
  <DEFPROC> <VARIABLE_NAME> <LPAREN> (<VARIABLE_NAME> (<COMA> <VARIABLE_NAME>))* <RPAREN>
  <LCURLY>
  comandoBlock()
  <RCURLY> 
}

void comandoBlock():
{}
{
   argumentList() ( <PUNTOYCOMA> argumentList() )*
   [ <PUNTOYCOMA> ]
}

void comandoJump():
{}
{
  <JUMP> <LPAREN> <NUM> <COMA> <NUM> <RPAREN>
}

void comandoMove():
{}
{
  <MOV> <LPAREN> <NUM> <RPAREN>
}

void comandoRight():
{}
{
  <RIGHT> <LPAREN> <RPAREN>
}

void comandoPut():
{}
{
  <PUT> <LPAREN> (<CHIPS> | <BALLOONS>) <COMA> <NUM> <RPAREN>
}

void pop():
{}
{
  <POP> <LPAREN> <NUM> <RPAREN>
}

void hop():
{}
{
  <HOP> <LPAREN> <NUM> <RPAREN>
}


void go():
{}
{
<GO> <LPAREN> <NUM> <COMA> <NUM> <RPAREN>
}


void pick():
{}
{
  <PICK> <LPAREN> (<CHIPS> | <BALLOONS>)<COMA> <NUM> <RPAREN> 
}

void comandoWalk():
{}
{
  <WALK> <LPAREN> <NUM> (<COMA> (<DIRECTION> | <ORIENTATION>))? <RPAREN>
}

void comandoLeap():
{}
{
  <LEAP> <LPAREN> <NUM> (<COMA> (<DIRECTION> | <ORIENTATION>))? <RPAREN>
}
  
void comandoTurn():
{}
{
  <TURN> <LPAREN> <DIRECTION> <RPAREN>
}

void comandoTurnTo():
{}
{
  <TURNTO> <LPAREN> <ORIENTATION> <RPAREN>
}

void comandoDrop():
{}
{
  <DROP> <LPAREN> <NUM> <RPAREN>
}

void comandoGet():
{}
{
  <GET> <LPAREN> <NUM> <RPAREN>
}

void comandoGrab():
{}
{
  <GRAB> <LPAREN> <NUM> <RPAREN>
}

void comandoLetGo():
{}
{
  <LETGO> <LPAREN> <NUM> <RPAREN>
}

void comandoNop():
{}
{
  <NOP> <LPAREN> <RPAREN> 
}

void comandoCan():
{}
{
  <CAN> <LPAREN> argumentList() <RPAREN> 
}

void comandoFacing():
{}
{
  <FACING> <LPAREN> <ORIENTATION> <RPAREN>  
}

void comandoNot():
{}
{
  <NOT> (comandoFacing() | comandoCan())
}  

void condicionalIf():
{}
{
  <IF> <CONDITION> <LPAREN> argumentList() <RPAREN> <LCURLY> argumentList() <RCURLY>
}

void condicionalWhile():
{}
{
  <WHILE> <CONDITION> <LPAREN> argumentList() <RPAREN> <LCURLY> argumentList() <RCURLY>
}

void argumentList():
{}
{
    comandoLeap()| comandoWalk() | comandoJump() | comandoTurn() | comandoTurnTo() | comandoDrop() | comandoGet() | comandoGrab() | comandoLetGo() |comandoNop() | condicionalIf() | condicionalWhile() 
}


void reglasdeSintaxis():
{}
{
  creacionVariable() |
  creacionProceso() |
  comandoJump() |
  comandoTurn() |
  comandoTurnTo() |
  comandoDrop() |
  comandoGet() |
  comandoGrab() |
  comandoLetGo() |
  comandoNop() |
  condicionalIf() |
  condicionalWhile() |
  comandoLeap() |
  comandoWalk() |
  comandoMove() |
  comandoRight() |
  comandoPut() |
  comandoCan() |
  comandoFacing() |
  comandoNot() |
  pop() |
  hop() |
  go() |
  pick()
}

void Programa():
{}
{
  (    reglasdeSintaxis())*< EOF >
}

  
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		String v;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| <MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| <HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| <GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		| <PUT> "("  put() ")"					  			
		| <PICK> "(" get()  ")"	
	    | < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
	    | <JUMP> "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:JUMP ";}
	    | <LETGO> "(" x=num() ")" {world.putBalloons(x); salida = "Command: LetGo";}
	    | <TURN> "(" v=direction() ")" {world.turn(v); salida = "Command: Turn";}
	    | <DROP> "(" x=num() ")" {world.putChips(x); salida = "Command: Drop";}
        | <GET> "(" x=num() ")" {world.pickChips(x); salida = "Command: Get"; }
        | <GRAB> "(" x=num() ")" {world.grabBalloons(x); salida = "Command: Grab"; }
	    | <TURNTO> "(" v=orientation() ")" {world.turnto(v); salida = "Command: Turnto";}
	    | <DEFPROC> <VARIABLE_NAME> "(" (<VARIABLE_NAME> ("," <VARIABLE_NAME>))* ")"
	    | <IF> <CONDITION> "(" argumentList() ")" " { " argumentList() " }"
        | logicaWalk()
        | logicaLeap()
        | logicaDefvar() 
		) ";"
	 
		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
    void logicaWalk():
	{
	  int x;
	  String v;
	  salida= new String();	
	} 
	{
	  <WALK> "(" x=num() [")" {
	    world.moveForward(x, false);
	    salida = "Command: Walk"; }]
	    ["," v=orientation() ")" {
	      world.turnto(v);
	      world.moveForward(x, false);
	      salida = "Command: Walk";}
	      | 
	      "," v=direction() ")" {
	        world.turn(v);
	        world.moveForward(x, false);
	        salida = "Command: Walk"; }]
	}

	void logicaLeap():
	{
	  int x;
	  String v;
	  salida= new String();	
	} 
	{
	  <LEAP> "(" x=num() [")" {
	    world.moveForward(x, true);
	    salida = "Command: Leap"; }]
	    ["," v=orientation() ")" {
	      world.turnto(v);
	      world.moveForward(x, true);
	      salida = "Command: Leap";}
	      | 
	      "," v=direction() ")" {
	        world.turn(v);
	        world.moveForward(x, true);
	        salida = "Command: Walk"; }]
	}


	void logicaDefvar():
	{
	  int x;
	  String v;
	  salida = new String();
	}
	{
	  <DEFVAR> v=variable_name() x=num() {
	    System.out.println("entra"); 
	    guardarVariables(v);
	    asignarValor(v,x);
	    System.out.println("Variable: " + v + ", Valor: " + x); 
	    salida = "Command: DefVar"; }
	}

	

	    

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	
	String direction() throws Error:
    {
        Token directionToken;
        String directionValue = "";
    }
    {
        directionToken = <DIRECTION>
        {
            directionValue = directionToken.image;
            return directionValue;
        }
    }
    
    String orientation() throws Error:
    {
        Token orientationToken;
        String orientationValue = "";
    }
    {
        orientationToken = <ORIENTATION>
        {
            orientationValue = orientationToken.image;
            return orientationValue;
        }
    }

    String variable_name() throws Error:
    {
        Token variable_nameToken;
        String variable_nameValue = "";
    }
    {
        variable_nameToken = <VARIABLE_NAME>
        {
            variable_nameValue = variable_nameToken.image;
            return variable_nameValue;
        }
    }
	