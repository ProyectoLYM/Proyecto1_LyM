/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: // Nombres de Comandos 
{
		< MOV:  "Mov">
		| < RIGHT: "RIGHT">
		| < PUT: "Put">
		| < PICK: "Pick">
		| < POP: "Pop" >
		| < GO: "GO" >
        | < HOP:  "HOP" >
        | < JUMP:  "jump" >
        | < WALK: "walk" >
        | < LEAP:  "leap" >
        | < TURN:  "turn" >
        | < TURNTO:  "turnto" >
        | < DROP:  "drop" >
        | < GET:  "get" >
        | < GRAB:  "grab" >
        | < LETGO:  "letGo" >
        | < NOP:  "nop" >
        | < DEFVAR:  "defVar" >
        | < DEFPROC:  "defProc" >
        | < IF:  "if" >
        | < ELSE:  "else" >
        | < WHILE:  "while" >
        | < REPEAT:  "repeat" >
        | < TIMES:  "times" >
        | < FACING:  "facing" >
        | < CAN:  "can" >
        | < NOT:  "not" >
        | < DIRECTION: "front" | "right" | "left" | "back" >
        | < ORIENTATION: "north" | "south" | "east" | "west" >
        | < CONDITIONAL : "facing"| "can" | "not" >
        | < DIRECTION_TURN : "left"| "right" | "around" >
        
}


TOKEN: // Palabras del lenguaje
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}


TOKEN: // Area de Operadores
{
  		
 		< VARIABLE_NAME: (["a"-"z", "A"-"Z"])+ (["a"-"z", "A"-"Z", "0"-"9"])* >
  		| < CONDITION: (["a"-"z", "A"-"Z", "0"-"9", " "])+ >
		| < PERIOD : "." >
		| < RPAREN : ")" >
		| < LPAREN : "(" >
		| < QUOTE : "\"" >
		| < RSQUARE : "]" >
		| < LSQUARE : "[" >
		| < DOSPUNTOS : ":" >
		| < COMA : "," >
		| < RCURLY : "}" >
        | < LCURLY : "{" >
}  		
  

TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}


// Gramatica


void creacionVariable():
{}
{
  <DEFVAR> <VARIABLE_NAME> <NUM>
}

void creacionProceso():
{}
{
  <DEFPROC> <VARIABLE_NAME> <LPAREN> (<VARIABLE_NAME> (<COMA> <VARIABLE_NAME>))* <RPAREN>
}

void comandoJump():
{}
{
  <JUMP> <LPAREN> <NUM> <NUM> <RPAREN>
}

void comandoMove():
{}
{
  <MOV> <LPAREN> <NUM> <RPAREN>
}

void comandoRight():
{}
{
  <RIGHT> <LPAREN> <RPAREN>
}

void comandoPut():
{}
{
  <PUT> <LPAREN> (<CHIPS> | <BALLOONS>) <COMA> <NUM> <RPAREN>
}

void pop():
{}
{
  <POP> <LPAREN> <NUM> <RPAREN>
}

void hop():
{}
{
  <HOP> <LPAREN> <NUM> <RPAREN>
}


void go():
{}
{
<GO> <LPAREN> <NUM> <COMA> <NUM> <RPAREN>
}


void pick():
{}
{
  <PICK> <LPAREN> (<CHIPS> | <BALLOONS>)<COMA> <NUM> <RPAREN> 
}

void comandoWalk():
{}
{
  <WALK> <LPAREN> <NUM> (<COMA> (<DIRECTION> | <ORIENTATION>))? <RPAREN>
}

void comandoLeap():
{}
{
  <LEAP> <LPAREN> <NUM> (<COMA> (<DIRECTION> | <ORIENTATION>))? <RPAREN>
}
  
void comandoTurn():
{}
{
  <TURN> <LPAREN> <DIRECTION_TURN> <RPAREN>
}

void comandoTurnTo():
{}
{
  <TURNTO> <LPAREN> <ORIENTATION> <RPAREN>
}

void comandoDrop():
{}
{
  <DROP> <LPAREN> <NUM> <RPAREN>
}

void comandoGet():
{}
{
  <GET> <LPAREN> <NUM> <RPAREN>
}

void comandoGrab():
{}
{
  <GRAB> <LPAREN> <NUM> <RPAREN>
}

void comandoLetGo():
{}
{
  <LETGO> <LPAREN> <NUM> <RPAREN>
}

void comandoNop():
{}
{
  <NOP> <LPAREN> <RPAREN> 
}

void condicionalIf():
{}
{
  <IF> <CONDITION> <LPAREN> argumentList() <RPAREN> <LCURLY> argumentList() <RCURLY>
}

void condicionalWhile():
{}
{
  <WHILE> <CONDITION> <LPAREN> argumentList() <RPAREN> <LCURLY> argumentList() <RCURLY>
}

void argumentList():
{}
{
    comandoLeap()| comandoWalk() | comandoJump() | comandoTurn() | comandoTurnTo() | comandoDrop() | comandoGet() | comandoGrab() | comandoLetGo() |comandoNop() 
}


void reglasdeSintaxis():
{}
{
  creacionVariable() |
  creacionProceso() |
  comandoJump() |
  comandoTurn() |
  comandoTurnTo() |
  comandoDrop() |
  comandoGet() |
  comandoGrab() |
  comandoLetGo() |
  comandoNop() |
  condicionalIf() |
  condicionalWhile() |
  comandoLeap() |
  comandoWalk() |
  comandoMove() |
  comandoRight() |
  comandoPut() |
  pop() |
  hop() |
  go() |
  pick()
}

void Programa():
{}
{
  (    reglasdeSintaxis())*< EOF >
}

  
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	